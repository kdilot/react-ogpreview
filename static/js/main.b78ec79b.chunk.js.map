{"version":3,"sources":["OgScraper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputContainer","styled","div","Btn","Container","TitleInput","input","ImageLayout","ContentsLayout","TitleText","DesText","UrlText","a","ErrorMsg","ErrorNoti","OgScraper","useState","rs","setRs","error","setErr","value","setValue","staticObject","ogTitle","ogType","ogUrl","ogDescription","ogImage","url","width","height","type","placeholder","onChange","e","target","onClick","ogs","err","results","data","Object","keys","length","src","alt","Truncate","lines","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+qFAKA,IA0FMA,EAAiBC,IAAOC,IAAV,KAQdC,EAAMF,IAAOC,IAAV,KAUHE,EAAYH,IAAOC,IAAV,KASTG,EAAaJ,IAAOK,MAAV,KAWVC,EAAcN,IAAOC,IAAV,KAcXM,EAAiBP,IAAOC,IAAV,KAQdO,EAAYR,IAAOC,IAAV,KAMTQ,EAAUT,IAAOC,IAAV,KAOPS,EAAUV,IAAOW,EAAV,KAQPC,EAAWZ,IAAOC,IAAV,KAURY,EAAYb,IAAOC,IAAV,KAQAa,EA7La,WAAO,IAAD,EACVC,mBAAc,IADJ,mBACvBC,EADuB,KACnBC,EADmB,OAENF,mBAAS,IAFH,mBAEvBG,EAFuB,KAEhBC,EAFgB,OAGJJ,mBAAS,IAHL,mBAGvBK,EAHuB,KAGhBC,EAHgB,KAIxBC,EAAe,CACjBC,QAAS,sBACTC,OAAQ,UACRC,MAAO,iBACPC,cACI,0FACJC,QAAS,CACLC,IAAK,yBACLC,MAAO,MACPC,OAAQ,MACRC,KAAM,cAsBd,OACI,oCACI,wDACA,kBAAChC,EAAD,KACI,kBAACK,EAAD,CACI4B,YAAa,MACbZ,MAAOA,EACPa,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEC,OAAOf,UAErC,kBAAClB,EAAD,CAAKkC,QA3BD,WACZf,EAAS,IACTF,EAAO,IACPkB,IAAI,CAAET,IAAKR,IAAS,SAASkB,EAAUC,GAC/BD,GACAnB,EAAO,SAEPoB,IACIA,EAAQrB,OACRC,EAAOoB,EAAQrB,OACfD,EAAMK,IAENL,EAAMsB,EAAQC,YAelB,UAEHtB,GACG,oCACI,kBAACN,EAAD,KAAWM,GACX,kBAACL,EAAD,kEAEe,MAItBG,GACG,kBAACb,EAAD,KACwC,IAAnCsC,OAAOC,KAAK1B,EAAGW,SAASgB,QACrB,kBAACrC,EAAD,KACI,yBAAKsC,IAAK5B,EAAGW,QAAQC,IAAKiB,IAAI,SAGtC,kBAACtC,EAAD,KACKS,EAAGO,SACA,kBAACf,EAAD,KACI,kBAACsC,EAAA,EAAD,CAAUC,MAAO,GAAI/B,EAAGO,UAG/BP,EAAGU,eACA,kBAACjB,EAAD,KACI,kBAACqC,EAAA,EAAD,CAAUC,MAAO,GACZ/B,EAAGU,gBAIhB,kBAAChB,EAAD,CACIsC,KAAMhC,EAAGS,MACTU,OAAO,SACPc,IAAI,uBACJ,kBAACH,EAAA,EAAD,CAAUC,MAAO,GAAI/B,EAAGS,UAKvCP,GAAS,6C,oMCtFtB,IAQMf,EAAYH,IAAOC,IAAV,KAQAiD,EAhBO,WAClB,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,c","file":"static/js/main.b78ec79b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ogs from 'open-graph-scraper';\nimport Truncate from 'react-truncate';\nimport styled from 'styled-components';\n\nconst OgScraper: React.FC = () => {\n    const [rs, setRs] = useState<any>('');\n    const [error, setErr] = useState('');\n    const [value, setValue] = useState('');\n    const staticObject = {\n        ogTitle: 'Open Graph protocol',\n        ogType: 'website',\n        ogUrl: 'http://ogp.me/',\n        ogDescription:\n            'The Open Graph protocol enables any web page to become a rich object in a social graph.',\n        ogImage: {\n            url: 'http://ogp.me/logo.png',\n            width: '300',\n            height: '300',\n            type: 'image/png',\n        },\n    };\n\n    const onPress = () => {\n        setValue('');\n        setErr('');\n        ogs({ url: value }, function(err: any, results: any) {\n            if (err) {\n                setErr('Error');\n            }\n            if (results) {\n                if (results.error) {\n                    setErr(results.error);\n                    setRs(staticObject);\n                } else {\n                    setRs(results.data);\n                }\n            }\n        });\n    };\n\n    return (\n        <>\n            <h1>React Open Graph Preview</h1>\n            <InputContainer>\n                <TitleInput\n                    placeholder={'URL'}\n                    value={value}\n                    onChange={e => setValue(e.target.value)}\n                />\n                <Btn onClick={onPress}>enter</Btn>\n            </InputContainer>\n            {error && (\n                <>\n                    <ErrorMsg>{error}</ErrorMsg>\n                    <ErrorNoti>\n                        If you're using local address, re-try with CORS\n                        extension.{' '}\n                    </ErrorNoti>\n                </>\n            )}\n            {rs && (\n                <Container>\n                    {Object.keys(rs.ogImage).length === 4 && (\n                        <ImageLayout>\n                            <img src={rs.ogImage.url} alt=\"img\" />\n                        </ImageLayout>\n                    )}\n                    <ContentsLayout>\n                        {rs.ogTitle && (\n                            <TitleText>\n                                <Truncate lines={1}>{rs.ogTitle}</Truncate>\n                            </TitleText>\n                        )}\n                        {rs.ogDescription && (\n                            <DesText>\n                                <Truncate lines={1}>\n                                    {rs.ogDescription}\n                                </Truncate>\n                            </DesText>\n                        )}\n                        <UrlText\n                            href={rs.ogUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\">\n                            <Truncate lines={1}>{rs.ogUrl}</Truncate>\n                        </UrlText>\n                    </ContentsLayout>\n                </Container>\n            )}\n            {error && <div>preview...</div>}\n        </>\n    );\n};\n\nconst InputContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-end;\n    margin-bottom: 2rem;\n`;\n\nconst Btn = styled.div`\n    padding: 0.5rem;\n    border: 1px solid black;\n    cursor: pointer;\n    &:hover {\n        background: black;\n        color: white;\n    }\n`;\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n    border: 1px solid black;\n    width: 500px;\n`;\n\nconst TitleInput = styled.input`\n    font-size: 1.2rem;\n    padding: 0.5rem 0;\n    border: none;\n    border-bottom: 1px solid darkgray;\n    width: 300px;\n    & ~ div {\n        margin-left: 0.5rem;\n    }\n`;\n\nconst ImageLayout = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100%;\n    border-right: 1px solid lightgray;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n    }\n`;\n\nconst ContentsLayout = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 10px;\n`;\n\nconst TitleText = styled.div`\n    flex: 1;\n    width: 100%;\n    font-weight: bold;\n`;\n\nconst DesText = styled.div`\n    flex: 1;\n    width: 100%;\n    color: rgba(0, 0, 0, 0.8);\n    font-size: 0.9rem;\n`;\n\nconst UrlText = styled.a`\n    margin-top: 10px;\n    flex: 1;\n    width: 100%;\n    color: rgba(0, 0, 0, 0.4);\n    font-size: 0.8rem;\n`;\n\nconst ErrorMsg = styled.div`\n    padding: 0.5rem;\n    background: rgba(255, 0, 0, 0.9);\n    border-radius: 4px;\n    color: white;\n    & ~ div {\n        margin: 0.5rem 0;\n    }\n`;\n\nconst ErrorNoti = styled.div`\n    padding: 0.3rem;\n    background: rgba(0, 0, 0, 0.5);\n    border-radius: 4px;\n    color: white;\n    font-size: 0.9rem;\n`;\n\nexport default OgScraper;\n","import React from 'react';\nimport OgScraper from 'OgScraper';\nimport styled from 'styled-components';\n\nconst App: React.FC = () => {\n    return (\n        <Container>\n            <OgScraper />\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}