{"version":3,"sources":["OgScraper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","ImageLayout","ContentsLayout","TitleText","DesText","UrlText","OgScraper","url","useState","rs","setRs","useEffect","console","log","ogs","err","results","data","Object","keys","ogImage","length","src","alt","ogTitle","text","ogDescription","href","ogUrl","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2oDAQA,IA4DMA,EAAYC,IAAOC,IAAV,KASTC,EAAcF,IAAOC,IAAV,KAgBXE,EAAiBH,IAAOC,IAAV,KAQdG,EAAYJ,IAAOC,IAAV,KAMTI,EAAUL,IAAOC,IAAV,KAOPK,EAAUN,IAAOC,IAAV,KAQEM,EAlHoB,SAAC,GAAwC,IAAD,IAArCC,WAAqC,MAA/B,yBAA+B,IACnDC,mBAAc,IADqC,mBAChEC,EADgE,KAC5DC,EAD4D,KA0BvE,OAxBAC,qBAAU,WACNC,QAAQC,IAAI,WACZC,IAAI,CAAEP,QAAO,SAASQ,EAAUC,GAG5BJ,QAAQC,IAAIG,GACRA,GACAN,EAAMM,EAAQC,WAgBvB,CAACV,IACGE,EACH,kBAACX,EAAD,KACwC,IAAnCoB,OAAOC,KAAKV,EAAGW,SAASC,QACrB,kBAACpB,EAAD,KACI,yBAAKqB,IAAKb,EAAGW,QAAQb,IAAKgB,IAAI,SAGtC,kBAACrB,EAAD,KACKO,EAAGe,SACA,kBAACrB,EAAD,KACI,kBAAC,IAAD,CAAcsB,KAAMhB,EAAGe,QAASH,OAAQ,MAG/CZ,EAAGiB,eACA,kBAACtB,EAAD,KACI,kBAAC,IAAD,CAAcqB,KAAMhB,EAAGiB,cAAeL,OAAQ,MAGtD,kBAAChB,EAAD,KACI,uBACIsB,KAAMlB,EAAGmB,MAAQnB,EAAGmB,MAAQrB,EAC5BsB,OAAO,SACPC,IAAI,uBACJ,kBAAC,IAAD,CACIL,KAAMhB,EAAGmB,MAAQnB,EAAGmB,MAAQrB,EAC5Bc,OAAQ,SAM5B,MCrDOU,EATO,WAClB,OACI,uCAEI,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.631299f9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ogs from 'open-graph-scraper';\nimport EllipsisText from 'react-ellipsis-text';\nimport styled from 'styled-components';\n\ninterface Props {\n    url?: string;\n}\nconst OgScraper: React.FC<Props> = ({ url = 'https://www.naver.com/' }) => {\n    const [rs, setRs] = useState<any>('');\n    useEffect(() => {\n        console.log('sadfsdf');\n        ogs({ url }, function(err: any, results: any) {\n            // console.log('error:', error); // This is returns true or false. True if there was a error. The error it self is inside the results object.\n            // console.log('results:', results);\n            console.log(results);\n            if (results) {\n                setRs(results.data);\n            }\n            // setRs({\n            //     ogTitle: 'Open Graph protocol',\n            //     ogType: 'website',\n            //     ogUrl: 'http://ogp.me/',\n            //     ogDescription:\n            //         'The Open Graph protocol enables any web page to become a rich object in a social graph.',\n            //     ogImage: {\n            //         url: 'http://ogp.me/logo.png',\n            //         width: '300',\n            //         height: '300',\n            //         type: 'image/png',\n            //     },\n            // });\n        });\n    }, [url]);\n    return rs ? (\n        <Container>\n            {Object.keys(rs.ogImage).length === 4 && (\n                <ImageLayout>\n                    <img src={rs.ogImage.url} alt=\"img\" />\n                </ImageLayout>\n            )}\n            <ContentsLayout>\n                {rs.ogTitle && (\n                    <TitleText>\n                        <EllipsisText text={rs.ogTitle} length={28} />\n                    </TitleText>\n                )}\n                {rs.ogDescription && (\n                    <DesText>\n                        <EllipsisText text={rs.ogDescription} length={34} />\n                    </DesText>\n                )}\n                <UrlText>\n                    <a\n                        href={rs.ogUrl ? rs.ogUrl : url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">\n                        <EllipsisText\n                            text={rs.ogUrl ? rs.ogUrl : url}\n                            length={64}\n                        />\n                    </a>\n                </UrlText>\n            </ContentsLayout>\n        </Container>\n    ) : null;\n};\n\nconst Container = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    flex-direction: row;\n    border: 1px solid black;\n    width: 500px;\n`;\n\nconst ImageLayout = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100%;\n    border-right: 1px solid lightgray;\n    img {\n        width: 100%;\n        height: 100%;\n        object-fit: contain;\n    }\n    & ~ div {\n    }\n`;\n\nconst ContentsLayout = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 10px;\n`;\n\nconst TitleText = styled.div`\n    flex: 1;\n    width: 100%;\n    font-weight: bold;\n`;\n\nconst DesText = styled.div`\n    flex: 1;\n    width: 100%;\n    color: rgba(0, 0, 0, 0.8);\n    font-size: 0.9rem;\n`;\n\nconst UrlText = styled.div`\n    margin-top: 10px;\n    flex: 1;\n    width: 100%;\n    color: rgba(0, 0, 0, 0.4);\n    font-size: 0.8rem;\n`;\n\nexport default OgScraper;\n","import React from 'react';\nimport OgScraper from 'OgScraper';\n\nconst App: React.FC = () => {\n    return (\n        <div>\n            sdfsdsd\n            <OgScraper />\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}